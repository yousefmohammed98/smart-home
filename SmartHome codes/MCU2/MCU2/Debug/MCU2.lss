
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae5  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d6  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f1  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d7  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b4  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "util/delay.h"
#include "MSPI_interface.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	/*Variables*/
	u8_t spi_recivedValue; // variable carry address sent by master to slave
	
	/* Atmega PINS status*/
	mdio_setPinStatus(PORTB,PIN5 | PIN4 | PIN7,OUTPUT);//PORT B PIN 5 ,4 & 7 set as an output PINS
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	60 eb       	ldi	r22, 0xB0	; 176
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 9c 00 	call	0x138	; 0x138 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN6,INPUT_FLOAT);//PORTB PIN 6 set as an input PIN
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	60 e4       	ldi	r22, 0x40	; 64
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	0e 94 9c 00 	call	0x138	; 0x138 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD, PIN0 | PIN1 ,OUTPUT); //PORT D PIN 0 & 1 set as an output PINS for AC and LIGHT respectively
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	63 e0       	ldi	r22, 0x03	; 3
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 9c 00 	call	0x138	; 0x138 <mdio_setPinStatus>
	
	/*Initializations*/
	mspi_init(MSPI_SLAVE_DEVICE,MSPI_LSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_PRE_16); //SPI initialization function for slave device at LSB order,sample R setup F & 16 bit prescaler frequency
  94:	23 e0       	ldi	r18, 0x03	; 3
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	60 e2       	ldi	r22, 0x20	; 32
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 45 01 	call	0x28a	; 0x28a <mspi_init>
	
    while (1) 
    {
		mspi_slaveSendRecv(0xFF,&spi_recivedValue); //Send address 0x60 to master MCU and receive the address sent from master MCU
  a0:	be 01       	movw	r22, r28
  a2:	6f 5f       	subi	r22, 0xFF	; 255
  a4:	7f 4f       	sbci	r23, 0xFF	; 255
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <mspi_slaveSendRecv>
		if (spi_recivedValue == 0x10) //If the received address is 0x10
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	80 31       	cpi	r24, 0x10	; 16
  b0:	59 f4       	brne	.+22     	; 0xc8 <main+0x5c>
		{
			mdio_setPinValue(PORTD,PIN0,HIGH); //Activate AC
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
			mdio_setPinValue(PORTD,PIN1,LOW); //Deactivate LIGHTS
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x34>
		}
		else if (spi_recivedValue == 0x20) //If the received address is 0x20
  c8:	80 32       	cpi	r24, 0x20	; 32
  ca:	31 f4       	brne	.+12     	; 0xd8 <main+0x6c>
		{
			mdio_setPinValue(PORTD,PIN0,LOW);//Deactivate the AC
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
  d6:	e4 cf       	rjmp	.-56     	; 0xa0 <main+0x34>
		}
		else if (spi_recivedValue == 0x30)  //If the received address is 0x30
  d8:	80 33       	cpi	r24, 0x30	; 48
  da:	59 f4       	brne	.+22     	; 0xf2 <main+0x86>
		{
			mdio_setPinValue(PORTD,PIN0,LOW);//Deactivate the AC
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
			mdio_setPinValue(PORTD,PIN1,HIGH);//Activate LIGHTS
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
  f0:	d7 cf       	rjmp	.-82     	; 0xa0 <main+0x34>
		}
		else if (spi_recivedValue == 0x40) //If the received address is 0x40
  f2:	80 34       	cpi	r24, 0x40	; 64
  f4:	31 f4       	brne	.+12     	; 0x102 <main+0x96>
		{
			mdio_setPinValue(PORTD,PIN1,LOW); //Deactivate LIGHTS
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
 100:	cf cf       	rjmp	.-98     	; 0xa0 <main+0x34>
		}
		else if (spi_recivedValue == 0x50) //If the received address is 0x50
 102:	80 35       	cpi	r24, 0x50	; 80
 104:	59 f4       	brne	.+22     	; 0x11c <main+0xb0>
		{
			mdio_setPinValue(PORTD,PIN0,HIGH);//Activate the AC
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
			mdio_setPinValue(PORTD,PIN1,HIGH);//Activate LIGHTS
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
 11a:	c2 cf       	rjmp	.-124    	; 0xa0 <main+0x34>
		}
		else if (spi_recivedValue == 0x60) //If the received address is 0x60
 11c:	80 36       	cpi	r24, 0x60	; 96
 11e:	09 f0       	breq	.+2      	; 0x122 <main+0xb6>
 120:	bf cf       	rjmp	.-130    	; 0xa0 <main+0x34>
		{
			mdio_setPinValue(PORTD,PIN0,LOW);//Deactivate the AC
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
			mdio_setPinValue(PORTD,PIN1,LOW); //Deactivate LIGHTS
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 05 01 	call	0x20a	; 0x20a <mdio_setPinValue>
 136:	b4 cf       	rjmp	.-152    	; 0xa0 <main+0x34>

00000138 <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus ( u8_t au8_port,u8_t au8_pin,u8_t au8_status){
	
	/*switching over GPIO Ports*/
	switch(au8_port){
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	f9 f0       	breq	.+62     	; 0x17a <mdio_setPinStatus+0x42>
 13c:	30 f0       	brcs	.+12     	; 0x14a <mdio_setPinStatus+0x12>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	a1 f1       	breq	.+104    	; 0x1aa <mdio_setPinStatus+0x72>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	09 f4       	brne	.+2      	; 0x148 <mdio_setPinStatus+0x10>
 146:	49 c0       	rjmp	.+146    	; 0x1da <mdio_setPinStatus+0xa2>
 148:	08 95       	ret
		/* in case of PORTA*/
		case PORTA:
			/*switching over pin status*/	
			switch(au8_status)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	41 f0       	breq	.+16     	; 0x15e <mdio_setPinStatus+0x26>
 14e:	18 f0       	brcs	.+6      	; 0x156 <mdio_setPinStatus+0x1e>
 150:	42 30       	cpi	r20, 0x02	; 2
 152:	51 f0       	breq	.+20     	; 0x168 <mdio_setPinStatus+0x30>
 154:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRA|= au8_pin;
 156:	8a b3       	in	r24, 0x1a	; 26
 158:	68 2b       	or	r22, r24
 15a:	6a bb       	out	0x1a, r22	; 26
					/*break from this case*/
					break;
 15c:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRA&=~au8_pin;
 15e:	8a b3       	in	r24, 0x1a	; 26
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	6a bb       	out	0x1a, r22	; 26
					/*break from this case*/
					break;
 166:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRA&= ~au8_pin;
 168:	8a b3       	in	r24, 0x1a	; 26
 16a:	96 2f       	mov	r25, r22
 16c:	90 95       	com	r25
 16e:	89 23       	and	r24, r25
 170:	8a bb       	out	0x1a, r24	; 26
					/*set the specified pins to 1 in Port*/
					MDIO_PORTA|= au8_pin;
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	68 2b       	or	r22, r24
 176:	6b bb       	out	0x1b, r22	; 27
					/*break from this case*/
					break;
 178:	08 95       	ret
			}
				break;
				
		case PORTB:
			/*switching over pin status*/	
			switch(au8_status)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	41 f0       	breq	.+16     	; 0x18e <mdio_setPinStatus+0x56>
 17e:	18 f0       	brcs	.+6      	; 0x186 <mdio_setPinStatus+0x4e>
 180:	42 30       	cpi	r20, 0x02	; 2
 182:	51 f0       	breq	.+20     	; 0x198 <mdio_setPinStatus+0x60>
 184:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRB|= au8_pin;
 186:	87 b3       	in	r24, 0x17	; 23
 188:	68 2b       	or	r22, r24
 18a:	67 bb       	out	0x17, r22	; 23
					/*break from this case*/
					break;
 18c:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRB&=~au8_pin;
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	60 95       	com	r22
 192:	68 23       	and	r22, r24
 194:	67 bb       	out	0x17, r22	; 23
					/*break from this case*/
					break;
 196:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRB&= ~au8_pin;
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	96 2f       	mov	r25, r22
 19c:	90 95       	com	r25
 19e:	89 23       	and	r24, r25
 1a0:	87 bb       	out	0x17, r24	; 23
					/*set the specified pins to 1 in Port*/
					MDIO_PORTB|= au8_pin;
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	68 2b       	or	r22, r24
 1a6:	68 bb       	out	0x18, r22	; 24
					/*break from this case*/
					break;
 1a8:	08 95       	ret
			}
				break;
				
		case PORTC:
			/*switching over pin status*/	
			switch(au8_status)
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	41 f0       	breq	.+16     	; 0x1be <mdio_setPinStatus+0x86>
 1ae:	18 f0       	brcs	.+6      	; 0x1b6 <mdio_setPinStatus+0x7e>
 1b0:	42 30       	cpi	r20, 0x02	; 2
 1b2:	51 f0       	breq	.+20     	; 0x1c8 <mdio_setPinStatus+0x90>
 1b4:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRC|= au8_pin;
 1b6:	84 b3       	in	r24, 0x14	; 20
 1b8:	68 2b       	or	r22, r24
 1ba:	64 bb       	out	0x14, r22	; 20
					/*break from this case*/
					break;
 1bc:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRC&=~au8_pin;
 1be:	84 b3       	in	r24, 0x14	; 20
 1c0:	60 95       	com	r22
 1c2:	68 23       	and	r22, r24
 1c4:	64 bb       	out	0x14, r22	; 20
					/*break from this case*/
					break;
 1c6:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRC&= ~au8_pin;
 1c8:	84 b3       	in	r24, 0x14	; 20
 1ca:	96 2f       	mov	r25, r22
 1cc:	90 95       	com	r25
 1ce:	89 23       	and	r24, r25
 1d0:	84 bb       	out	0x14, r24	; 20
					/*set the specified pins to 1 in Port*/
					MDIO_PORTC|= au8_pin;
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	68 2b       	or	r22, r24
 1d6:	65 bb       	out	0x15, r22	; 21
					/*break from this case*/
					break;
 1d8:	08 95       	ret
			}
				break;
		case PORTD:
			/*switching over pin status*/	
			switch(au8_status)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	41 f0       	breq	.+16     	; 0x1ee <mdio_setPinStatus+0xb6>
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <mdio_setPinStatus+0xae>
 1e0:	42 30       	cpi	r20, 0x02	; 2
 1e2:	51 f0       	breq	.+20     	; 0x1f8 <mdio_setPinStatus+0xc0>
 1e4:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRD|= au8_pin;
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	68 2b       	or	r22, r24
 1ea:	61 bb       	out	0x11, r22	; 17
					/*break from this case*/
					break;
 1ec:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRD&=~au8_pin;
 1ee:	81 b3       	in	r24, 0x11	; 17
 1f0:	60 95       	com	r22
 1f2:	68 23       	and	r22, r24
 1f4:	61 bb       	out	0x11, r22	; 17
					/*break from this case*/
					break;
 1f6:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRD&= ~au8_pin;
 1f8:	81 b3       	in	r24, 0x11	; 17
 1fa:	96 2f       	mov	r25, r22
 1fc:	90 95       	com	r25
 1fe:	89 23       	and	r24, r25
 200:	81 bb       	out	0x11, r24	; 17
					/*set the specified pins to 1 in Port*/
					MDIO_PORTD|= au8_pin;
 202:	82 b3       	in	r24, 0x12	; 18
 204:	68 2b       	or	r22, r24
 206:	62 bb       	out	0x12, r22	; 18
 208:	08 95       	ret

0000020a <mdio_setPinValue>:
}

void mdio_setPinValue ( u8_t au8_port,u8_t au8_pin,u8_t au8_value){
	
	/*switching over GPIO Ports*/
	switch(au8_port){
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	a1 f0       	breq	.+40     	; 0x236 <mdio_setPinValue+0x2c>
 20e:	28 f0       	brcs	.+10     	; 0x21a <mdio_setPinValue+0x10>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	f9 f0       	breq	.+62     	; 0x252 <mdio_setPinValue+0x48>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	59 f1       	breq	.+86     	; 0x26e <mdio_setPinValue+0x64>
 218:	08 95       	ret
		/* in case of PORTA*/
		case PORTA:
		/*switching over pin status*/
		switch(au8_value)
 21a:	44 23       	and	r20, r20
 21c:	19 f0       	breq	.+6      	; 0x224 <mdio_setPinValue+0x1a>
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	31 f0       	breq	.+12     	; 0x22e <mdio_setPinValue+0x24>
 222:	08 95       	ret
		{   /*in case of LOW*/
			case LOW:
				MDIO_PORTA&= ~au8_pin;
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	60 95       	com	r22
 228:	68 23       	and	r22, r24
 22a:	6b bb       	out	0x1b, r22	; 27
			/*break from this case*/
				break;
 22c:	08 95       	ret
			/*in case of HIGH*/
			case HIGH:
			/*set the specified pins to 0 in PORT*/
				MDIO_PORTA|=au8_pin;
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	68 2b       	or	r22, r24
 232:	6b bb       	out	0x1b, r22	; 27
			/*break from this case*/
				break;
 234:	08 95       	ret
		break;
		
		/* in case of PORTB*/
		case PORTB:
		/*switching over pin status*/
		switch(au8_value)
 236:	44 23       	and	r20, r20
 238:	19 f0       	breq	.+6      	; 0x240 <mdio_setPinValue+0x36>
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	31 f0       	breq	.+12     	; 0x24a <mdio_setPinValue+0x40>
 23e:	08 95       	ret
		{   /*in case of LOW*/
			case LOW:
				MDIO_PORTB&= ~au8_pin;
 240:	88 b3       	in	r24, 0x18	; 24
 242:	60 95       	com	r22
 244:	68 23       	and	r22, r24
 246:	68 bb       	out	0x18, r22	; 24
			/*break from this case*/
				break;
 248:	08 95       	ret
			/*in case of HIGH*/
			case HIGH:
			/*set the specified pins to 0 in PORT*/
				MDIO_PORTB|=au8_pin;
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	68 2b       	or	r22, r24
 24e:	68 bb       	out	0x18, r22	; 24
			/*break from this case*/
				break;
 250:	08 95       	ret
		}
		break;
		/* in case of PORTC*/
		case PORTC:
		/*switching over pin status*/
		switch(au8_value)
 252:	44 23       	and	r20, r20
 254:	19 f0       	breq	.+6      	; 0x25c <mdio_setPinValue+0x52>
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	31 f0       	breq	.+12     	; 0x266 <mdio_setPinValue+0x5c>
 25a:	08 95       	ret
		{   /*in case of LOW*/
			case LOW:
				MDIO_PORTC&= ~au8_pin;
 25c:	85 b3       	in	r24, 0x15	; 21
 25e:	60 95       	com	r22
 260:	68 23       	and	r22, r24
 262:	65 bb       	out	0x15, r22	; 21
			/*break from this case*/
				break;
 264:	08 95       	ret
			/*in case of HIGH*/
			case HIGH:
			/*set the specified pins to 0 in PORT*/
				MDIO_PORTC|=au8_pin;
 266:	85 b3       	in	r24, 0x15	; 21
 268:	68 2b       	or	r22, r24
 26a:	65 bb       	out	0x15, r22	; 21
			/*break from this case*/
				break;
 26c:	08 95       	ret
		}
		break;
		/* in case of PORTD*/
		case PORTD:
		/*switching over pin status*/
		switch(au8_value)
 26e:	44 23       	and	r20, r20
 270:	19 f0       	breq	.+6      	; 0x278 <mdio_setPinValue+0x6e>
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	31 f0       	breq	.+12     	; 0x282 <mdio_setPinValue+0x78>
 276:	08 95       	ret
		{   /*in case of LOW*/
			case LOW:
				MDIO_PORTD&= ~au8_pin;
 278:	82 b3       	in	r24, 0x12	; 18
 27a:	60 95       	com	r22
 27c:	68 23       	and	r22, r24
 27e:	62 bb       	out	0x12, r22	; 18
			/*break from this case*/
				break;
 280:	08 95       	ret
			/*in case of HIGH*/
			case HIGH:
			/*set the specified pins to 0 in PORT*/
				MDIO_PORTD|=au8_pin;
 282:	82 b3       	in	r24, 0x12	; 18
 284:	68 2b       	or	r22, r24
 286:	62 bb       	out	0x12, r22	; 18
 288:	08 95       	ret

0000028a <mspi_init>:
        /*Wait for 1 microsecond*/
        _delay_us(1);
    }
    
    /*Get the received data from slave*/
    *au8_recvData = MSPI_SPDR;
 28a:	1d b8       	out	0x0d, r1	; 13
 28c:	20 fd       	sbrc	r18, 0
 28e:	04 c0       	rjmp	.+8      	; 0x298 <mspi_init+0xe>
 290:	9e b1       	in	r25, 0x0e	; 14
 292:	91 60       	ori	r25, 0x01	; 1
 294:	9e b9       	out	0x0e, r25	; 14
 296:	03 c0       	rjmp	.+6      	; 0x29e <mspi_init+0x14>
 298:	9e b1       	in	r25, 0x0e	; 14
 29a:	9e 7f       	andi	r25, 0xFE	; 254
 29c:	9e b9       	out	0x0e, r25	; 14
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	68 2b       	or	r22, r24
 2aa:	46 2b       	or	r20, r22
 2ac:	26 95       	lsr	r18
 2ae:	24 2b       	or	r18, r20
 2b0:	20 64       	ori	r18, 0x40	; 64
 2b2:	2d b9       	out	0x0d, r18	; 13
 2b4:	08 95       	ret

000002b6 <mspi_slaveSendRecv>:
}

void mspi_slaveSendRecv(u8_t au8_sendData, u8_t* au8_recvData)
{   
    /*Checking if the SPI flag rises*/
    if( GET_BIT(MSPI_SPSR, 7) )
 2b6:	77 9b       	sbis	0x0e, 7	; 14
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <mspi_slaveSendRecv+0xc>
    {
        /*Get the received master data*/
        *au8_recvData = MSPI_SPDR;
 2ba:	9f b1       	in	r25, 0x0f	; 15
 2bc:	fb 01       	movw	r30, r22
 2be:	90 83       	st	Z, r25

        /*Set the new data*/
        MSPI_SPDR = au8_sendData;
 2c0:	8f b9       	out	0x0f, r24	; 15
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
