
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00800060  000003c4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fdd  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ed  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008aa  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000275c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ed  00000000  00000000  00002e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define  F_CPU 16000000UL
#include "util/delay.h"
#include "MSPI_interface.h"
#include "MUART_interface.h"
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	/*Variables*/
	u8_t spi_sentValue; // variable carry address sent by slave to master
	u8_t uart_recivedByte='-'; // variable carry the character sent from blue tooth module (initialized with '*' as dummy character)
  8c:	8d e2       	ldi	r24, 0x2D	; 45
  8e:	8a 83       	std	Y+2, r24	; 0x02
	
	/* Atmega PINS status*/
    mdio_setPinStatus(PORTB,PIN5 | PIN4 | PIN7,OUTPUT); //PORT B PIN 5 ,4 & 7 set as an output PINS
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	60 eb       	ldi	r22, 0xB0	; 176
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 31 01 	call	0x262	; 0x262 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN6,INPUT_FLOAT); //PORTB PIN 6 set as an input PIN
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e4       	ldi	r22, 0x40	; 64
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 31 01 	call	0x262	; 0x262 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD,PIN0,INPUT_FLOAT); //PORTD PIN 0 set as an input PIN
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 31 01 	call	0x262	; 0x262 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD,PIN1,OUTPUT); //PORTD PIN 1 set as an output PIN
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 31 01 	call	0x262	; 0x262 <mdio_setPinStatus>
	
	/*Initializations*/
	muart_init(MUART_9600_BR); //UART initialization function at 9600 baud rate
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 c0 01 	call	0x380	; 0x380 <muart_init>
	mspi_init(MSPI_MASTER_DEVICE,MSPI_LSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_PRE_16); //SPI initialization function for master device at LSB order,sample R setup F & 16 bit prescaler frequency
  c0:	23 e0       	ldi	r18, 0x03	; 3
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	60 e2       	ldi	r22, 0x20	; 32
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	0e 94 9a 01 	call	0x334	; 0x334 <mspi_init>


	muart_sendStream((u8_t*)"WELCOME TO SMARTHOME\r",22 ); // Message to be shown on the mobile device
  cc:	66 e1       	ldi	r22, 0x16	; 22
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	80 e7       	ldi	r24, 0x70	; 112
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x64>
  e6:	00 00       	nop
	_delay_ms(50);
	START:
	muart_sendStream((u8_t*)"please choose between : (write only the number in the left) \r", 62); // Message to be shown on the mobile device
  e8:	6e e3       	ldi	r22, 0x3E	; 62
  ea:	86 e7       	ldi	r24, 0x76	; 118
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	80 e7       	ldi	r24, 0x70	; 112
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x76>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x80>
 102:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"1) TURN AC ON ONLY\r", 19); // Message to be shown on the mobile device
 104:	63 e1       	ldi	r22, 0x13	; 19
 106:	84 eb       	ldi	r24, 0xB4	; 180
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x92>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x9c>
 11e:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"2) TURN AC OFF ONLY\r", 20); // Message to be shown on the mobile device
 120:	64 e1       	ldi	r22, 0x14	; 20
 122:	88 ec       	ldi	r24, 0xC8	; 200
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xae>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xb8>
 13a:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"3) TURN LIGHT ON ONLY\r", 22); // Message to be shown on the mobile device
 13c:	66 e1       	ldi	r22, 0x16	; 22
 13e:	8d ed       	ldi	r24, 0xDD	; 221
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	80 e7       	ldi	r24, 0x70	; 112
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xca>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xd4>
 156:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"4) TURN LIGHT OFF ONLY\r", 23); // Message to be shown on the mobile device
 158:	67 e1       	ldi	r22, 0x17	; 23
 15a:	84 ef       	ldi	r24, 0xF4	; 244
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xe6>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xf0>
 172:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"5) TURN ON BOTH\r", 17);// Message to be shown on the mobile device
 174:	61 e1       	ldi	r22, 0x11	; 17
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	80 e7       	ldi	r24, 0x70	; 112
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x102>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x10c>
 18e:	00 00       	nop
	_delay_ms(50);
	muart_sendStream((u8_t*)"6) TURN OFF BOTH\r", 18); // Message to be shown on the mobile device
 190:	62 e1       	ldi	r22, 0x12	; 18
 192:	8d e1       	ldi	r24, 0x1D	; 29
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
	
    while (1) 
    {
		uart_recivedByte='-';  //Re-initialization for the variable to be used in case of the user types again
 19a:	8d e2       	ldi	r24, 0x2D	; 45
 19c:	8a 83       	std	Y+2, r24	; 0x02
		muart_recvByte(&uart_recivedByte); //Read the received byte from BLUETOOTH module
 19e:	ce 01       	movw	r24, r28
 1a0:	02 96       	adiw	r24, 0x02	; 2
 1a2:	0e 94 c8 01 	call	0x390	; 0x390 <muart_recvByte>
		if (uart_recivedByte=='1') //If the received byte is '1'
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	81 33       	cpi	r24, 0x31	; 49
 1aa:	61 f4       	brne	.+24     	; 0x1c4 <main+0x142>
		{
			muart_sendStream((u8_t*)"\r\rAC is turned on\r\r",20); // Message to be shown on the mobile device			
 1ac:	64 e1       	ldi	r22, 0x14	; 20
 1ae:	8f e2       	ldi	r24, 0x2F	; 47
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x10,&spi_sentValue);//Send address 0x10 to slave MCU and receive the address sent from slave MCU
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 1c2:	92 cf       	rjmp	.-220    	; 0xe8 <main+0x66>
		}
		else  if (uart_recivedByte=='2') //If the received byte is '2'
 1c4:	82 33       	cpi	r24, 0x32	; 50
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <main+0x15e>
		{
			muart_sendStream((u8_t*)"\r\rAC is turned off\r\r",21); // Message to be shown on the mobile device
 1c8:	65 e1       	ldi	r22, 0x15	; 21
 1ca:	83 e4       	ldi	r24, 0x43	; 67
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x20,&spi_sentValue); //Send address 0x20 to slave MCU and receive the address sent from slave MCU
 1d2:	be 01       	movw	r22, r28
 1d4:	6f 5f       	subi	r22, 0xFF	; 255
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 1de:	84 cf       	rjmp	.-248    	; 0xe8 <main+0x66>
		}
		else  if (uart_recivedByte=='3') //If the received byte is '3'
 1e0:	83 33       	cpi	r24, 0x33	; 51
 1e2:	61 f4       	brne	.+24     	; 0x1fc <main+0x17a>
		{
			muart_sendStream((u8_t*)"\r\rlight is turned on\r\r",23);// Message to be shown on the mobile device
 1e4:	67 e1       	ldi	r22, 0x17	; 23
 1e6:	88 e5       	ldi	r24, 0x58	; 88
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x30,&spi_sentValue); //Send address 0x30 to slave MCU and receive the address sent from slave MCU
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 1fa:	76 cf       	rjmp	.-276    	; 0xe8 <main+0x66>
		}
		else  if (uart_recivedByte=='4') //If the received byte is '4'
 1fc:	84 33       	cpi	r24, 0x34	; 52
 1fe:	61 f4       	brne	.+24     	; 0x218 <main+0x196>
		{
			muart_sendStream((u8_t*)"\r\rlight is turned off\r\r",24); // Message to be shown on the mobile device
 200:	68 e1       	ldi	r22, 0x18	; 24
 202:	8f e6       	ldi	r24, 0x6F	; 111
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x40,&spi_sentValue); //Send address 0x40 to slave MCU and receive the address sent from slave MCU
 20a:	be 01       	movw	r22, r28
 20c:	6f 5f       	subi	r22, 0xFF	; 255
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 216:	68 cf       	rjmp	.-304    	; 0xe8 <main+0x66>
		}
		else  if (uart_recivedByte=='5') //If the received byte is '5'
 218:	85 33       	cpi	r24, 0x35	; 53
 21a:	61 f4       	brne	.+24     	; 0x234 <main+0x1b2>
		{
			muart_sendStream((u8_t*)"\r\rBOTH LIGHT AND AC ARE TURNED ON\r\r",36); // Message to be shown on the mobile device
 21c:	64 e2       	ldi	r22, 0x24	; 36
 21e:	87 e8       	ldi	r24, 0x87	; 135
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x50,&spi_sentValue); //Send address 0x50 to slave MCU and receive the address sent from slave MCU
 226:	be 01       	movw	r22, r28
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	80 e5       	ldi	r24, 0x50	; 80
 22e:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 232:	5a cf       	rjmp	.-332    	; 0xe8 <main+0x66>
		} 
		
		else  if (uart_recivedByte=='6') //If the received byte is '6'
 234:	86 33       	cpi	r24, 0x36	; 54
 236:	61 f4       	brne	.+24     	; 0x250 <main+0x1ce>
		{
			muart_sendStream((u8_t*)"\r\rBOTH LIGHT AND AC ARE TURNED OFF\r\r",37); // Message to be shown on the mobile device
 238:	65 e2       	ldi	r22, 0x25	; 37
 23a:	8b ea       	ldi	r24, 0xAB	; 171
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			mspi_masterSendRecv(0x60,&spi_sentValue); //Send address 0x60 to slave MCU and receive the address sent from slave MCU
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	80 e6       	ldi	r24, 0x60	; 96
 24a:	0e 94 b0 01 	call	0x360	; 0x360 <mspi_masterSendRecv>
			goto START; //goto start in order to show the messages above again
 24e:	4c cf       	rjmp	.-360    	; 0xe8 <main+0x66>
		}
		
		else if(uart_recivedByte!= '-' ) //If the received byte is not '1' or '2' or '3' or '4' or '5' or '6'
 250:	8d 32       	cpi	r24, 0x2D	; 45
 252:	09 f4       	brne	.+2      	; 0x256 <main+0x1d4>
 254:	a2 cf       	rjmp	.-188    	; 0x19a <main+0x118>
		{
			muart_sendStream((u8_t*)"\r\rWRONG ENTERY\r\r",16); // Message to be shown on the mobile device
 256:	60 e1       	ldi	r22, 0x10	; 16
 258:	80 ed       	ldi	r24, 0xD0	; 208
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 ce 01 	call	0x39c	; 0x39c <muart_sendStream>
			goto START; //goto start in order to show the messages above again in case of the user pressed again
 260:	43 cf       	rjmp	.-378    	; 0xe8 <main+0x66>

00000262 <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus ( u8_t au8_port,u8_t au8_pin,u8_t au8_status){
	
	/*switching over GPIO Ports*/
	switch(au8_port){
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	f9 f0       	breq	.+62     	; 0x2a4 <mdio_setPinStatus+0x42>
 266:	30 f0       	brcs	.+12     	; 0x274 <mdio_setPinStatus+0x12>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	a1 f1       	breq	.+104    	; 0x2d4 <mdio_setPinStatus+0x72>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	09 f4       	brne	.+2      	; 0x272 <mdio_setPinStatus+0x10>
 270:	49 c0       	rjmp	.+146    	; 0x304 <mdio_setPinStatus+0xa2>
 272:	08 95       	ret
		/* in case of PORTA*/
		case PORTA:
			/*switching over pin status*/	
			switch(au8_status)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	41 f0       	breq	.+16     	; 0x288 <mdio_setPinStatus+0x26>
 278:	18 f0       	brcs	.+6      	; 0x280 <mdio_setPinStatus+0x1e>
 27a:	42 30       	cpi	r20, 0x02	; 2
 27c:	51 f0       	breq	.+20     	; 0x292 <mdio_setPinStatus+0x30>
 27e:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRA|= au8_pin;
 280:	8a b3       	in	r24, 0x1a	; 26
 282:	68 2b       	or	r22, r24
 284:	6a bb       	out	0x1a, r22	; 26
					/*break from this case*/
					break;
 286:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRA&=~au8_pin;
 288:	8a b3       	in	r24, 0x1a	; 26
 28a:	60 95       	com	r22
 28c:	68 23       	and	r22, r24
 28e:	6a bb       	out	0x1a, r22	; 26
					/*break from this case*/
					break;
 290:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRA&= ~au8_pin;
 292:	8a b3       	in	r24, 0x1a	; 26
 294:	96 2f       	mov	r25, r22
 296:	90 95       	com	r25
 298:	89 23       	and	r24, r25
 29a:	8a bb       	out	0x1a, r24	; 26
					/*set the specified pins to 1 in Port*/
					MDIO_PORTA|= au8_pin;
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	68 2b       	or	r22, r24
 2a0:	6b bb       	out	0x1b, r22	; 27
					/*break from this case*/
					break;
 2a2:	08 95       	ret
			}
				break;
				
		case PORTB:
			/*switching over pin status*/	
			switch(au8_status)
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <mdio_setPinStatus+0x56>
 2a8:	18 f0       	brcs	.+6      	; 0x2b0 <mdio_setPinStatus+0x4e>
 2aa:	42 30       	cpi	r20, 0x02	; 2
 2ac:	51 f0       	breq	.+20     	; 0x2c2 <mdio_setPinStatus+0x60>
 2ae:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRB|= au8_pin;
 2b0:	87 b3       	in	r24, 0x17	; 23
 2b2:	68 2b       	or	r22, r24
 2b4:	67 bb       	out	0x17, r22	; 23
					/*break from this case*/
					break;
 2b6:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRB&=~au8_pin;
 2b8:	87 b3       	in	r24, 0x17	; 23
 2ba:	60 95       	com	r22
 2bc:	68 23       	and	r22, r24
 2be:	67 bb       	out	0x17, r22	; 23
					/*break from this case*/
					break;
 2c0:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRB&= ~au8_pin;
 2c2:	87 b3       	in	r24, 0x17	; 23
 2c4:	96 2f       	mov	r25, r22
 2c6:	90 95       	com	r25
 2c8:	89 23       	and	r24, r25
 2ca:	87 bb       	out	0x17, r24	; 23
					/*set the specified pins to 1 in Port*/
					MDIO_PORTB|= au8_pin;
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	68 2b       	or	r22, r24
 2d0:	68 bb       	out	0x18, r22	; 24
					/*break from this case*/
					break;
 2d2:	08 95       	ret
			}
				break;
				
		case PORTC:
			/*switching over pin status*/	
			switch(au8_status)
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	41 f0       	breq	.+16     	; 0x2e8 <mdio_setPinStatus+0x86>
 2d8:	18 f0       	brcs	.+6      	; 0x2e0 <mdio_setPinStatus+0x7e>
 2da:	42 30       	cpi	r20, 0x02	; 2
 2dc:	51 f0       	breq	.+20     	; 0x2f2 <mdio_setPinStatus+0x90>
 2de:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRC|= au8_pin;
 2e0:	84 b3       	in	r24, 0x14	; 20
 2e2:	68 2b       	or	r22, r24
 2e4:	64 bb       	out	0x14, r22	; 20
					/*break from this case*/
					break;
 2e6:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRC&=~au8_pin;
 2e8:	84 b3       	in	r24, 0x14	; 20
 2ea:	60 95       	com	r22
 2ec:	68 23       	and	r22, r24
 2ee:	64 bb       	out	0x14, r22	; 20
					/*break from this case*/
					break;
 2f0:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRC&= ~au8_pin;
 2f2:	84 b3       	in	r24, 0x14	; 20
 2f4:	96 2f       	mov	r25, r22
 2f6:	90 95       	com	r25
 2f8:	89 23       	and	r24, r25
 2fa:	84 bb       	out	0x14, r24	; 20
					/*set the specified pins to 1 in Port*/
					MDIO_PORTC|= au8_pin;
 2fc:	85 b3       	in	r24, 0x15	; 21
 2fe:	68 2b       	or	r22, r24
 300:	65 bb       	out	0x15, r22	; 21
					/*break from this case*/
					break;
 302:	08 95       	ret
			}
				break;
		case PORTD:
			/*switching over pin status*/	
			switch(au8_status)
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <mdio_setPinStatus+0xb6>
 308:	18 f0       	brcs	.+6      	; 0x310 <mdio_setPinStatus+0xae>
 30a:	42 30       	cpi	r20, 0x02	; 2
 30c:	51 f0       	breq	.+20     	; 0x322 <mdio_setPinStatus+0xc0>
 30e:	08 95       	ret
			{   /*in case of OUTPUt*/
				case OUTPUT:
					MDIO_DDRD|= au8_pin;
 310:	81 b3       	in	r24, 0x11	; 17
 312:	68 2b       	or	r22, r24
 314:	61 bb       	out	0x11, r22	; 17
					/*break from this case*/
					break;
 316:	08 95       	ret
				/*in case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRD&=~au8_pin;
 318:	81 b3       	in	r24, 0x11	; 17
 31a:	60 95       	com	r22
 31c:	68 23       	and	r22, r24
 31e:	61 bb       	out	0x11, r22	; 17
					/*break from this case*/
					break;
 320:	08 95       	ret
				/*in case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					/*set the specified pins to 0 in DDR*/
					MDIO_DDRD&= ~au8_pin;
 322:	81 b3       	in	r24, 0x11	; 17
 324:	96 2f       	mov	r25, r22
 326:	90 95       	com	r25
 328:	89 23       	and	r24, r25
 32a:	81 bb       	out	0x11, r24	; 17
					/*set the specified pins to 1 in Port*/
					MDIO_PORTD|= au8_pin;
 32c:	82 b3       	in	r24, 0x12	; 18
 32e:	68 2b       	or	r22, r24
 330:	62 bb       	out	0x12, r22	; 18
 332:	08 95       	ret

00000334 <mspi_init>:
/************************************************************************/

void mspi_init(u8_t au8_spiDevType, u8_t au8_dataOrder, u8_t au8_dataTransfer_clkType, u8_t au8_clkFrequency)
{
    /*Reset the control register*/
    MSPI_SPCR = 0;
 334:	1d b8       	out	0x0d, r1	; 13

    /*Checking the CLK frequency value to enable double speed or to disable it*/
    if( (au8_clkFrequency % 2) == 0 )
 336:	20 fd       	sbrc	r18, 0
 338:	04 c0       	rjmp	.+8      	; 0x342 <mspi_init+0xe>
    {
        /*Enable double speed*/
        SET_BIT(MSPI_SPSR, 0);
 33a:	9e b1       	in	r25, 0x0e	; 14
 33c:	91 60       	ori	r25, 0x01	; 1
 33e:	9e b9       	out	0x0e, r25	; 14
 340:	03 c0       	rjmp	.+6      	; 0x348 <mspi_init+0x14>
    }
    else
    {
        /*Disable double speed*/
        CLEAR_BIT(MSPI_SPSR, 0);
 342:	9e b1       	in	r25, 0x0e	; 14
 344:	9e 7f       	andi	r25, 0xFE	; 254
 346:	9e b9       	out	0x0e, r25	; 14
    }

    /*Setting the SPI control register parameters*/
    MSPI_SPCR = (1<<6) | au8_spiDevType | au8_dataOrder | (au8_dataTransfer_clkType << 2) | (au8_clkFrequency / 2);
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	44 0f       	add	r20, r20
 350:	55 1f       	adc	r21, r21
 352:	68 2b       	or	r22, r24
 354:	46 2b       	or	r20, r22
 356:	26 95       	lsr	r18
 358:	24 2b       	or	r18, r20
 35a:	20 64       	ori	r18, 0x40	; 64
 35c:	2d b9       	out	0x0d, r18	; 13
 35e:	08 95       	ret

00000360 <mspi_masterSendRecv>:
{
    /*This variable used in timing out mechanism*/
    u8_t au8_timeOut = 0;

    /*Set the master data that will be sent*/
    MSPI_SPDR = au8_sendData;
 360:	8f b9       	out	0x0f, r24	; 15
}

void mspi_masterSendRecv(u8_t au8_sendData, u8_t* au8_recvData)
{
    /*This variable used in timing out mechanism*/
    u8_t au8_timeOut = 0;
 362:	80 e0       	ldi	r24, 0x00	; 0

    /*Set the master data that will be sent*/
    MSPI_SPDR = au8_sendData;

    /*Wait until the SPI flag rises*/
    while( (GET_BIT(MSPI_SPSR, 7) == 0) && (au8_timeOut < TIMEOUT_VALUE) )
 364:	05 c0       	rjmp	.+10     	; 0x370 <mspi_masterSendRecv+0x10>
    {
        /*Increasing the timeout variable*/
        au8_timeOut++;
 366:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	95 e0       	ldi	r25, 0x05	; 5
 36a:	9a 95       	dec	r25
 36c:	f1 f7       	brne	.-4      	; 0x36a <mspi_masterSendRecv+0xa>
 36e:	00 00       	nop

    /*Set the master data that will be sent*/
    MSPI_SPDR = au8_sendData;

    /*Wait until the SPI flag rises*/
    while( (GET_BIT(MSPI_SPSR, 7) == 0) && (au8_timeOut < TIMEOUT_VALUE) )
 370:	77 99       	sbic	0x0e, 7	; 14
 372:	02 c0       	rjmp	.+4      	; 0x378 <mspi_masterSendRecv+0x18>
 374:	82 33       	cpi	r24, 0x32	; 50
 376:	b8 f3       	brcs	.-18     	; 0x366 <mspi_masterSendRecv+0x6>
        /*Wait for 1 microsecond*/
        _delay_us(1);
    }
    
    /*Get the received data from slave*/
    *au8_recvData = MSPI_SPDR;
 378:	8f b1       	in	r24, 0x0f	; 15
 37a:	fb 01       	movw	r30, r22
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <muart_init>:
 380:	1b b8       	out	0x0b, r1	; 11
 382:	28 e1       	ldi	r18, 0x18	; 24
 384:	2a b9       	out	0x0a, r18	; 10
 386:	26 e8       	ldi	r18, 0x86	; 134
 388:	20 bd       	out	0x20, r18	; 32
 38a:	89 b9       	out	0x09, r24	; 9
 38c:	90 bd       	out	0x20, r25	; 32
 38e:	08 95       	ret

00000390 <muart_recvByte>:
 390:	5f 9b       	sbis	0x0b, 7	; 11
 392:	03 c0       	rjmp	.+6      	; 0x39a <muart_recvByte+0xa>
 394:	2c b1       	in	r18, 0x0c	; 12
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
 39a:	08 95       	ret

0000039c <muart_sendStream>:
 39c:	fc 01       	movw	r30, r24
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <muart_sendStream+0x1a>
 3a0:	5d 9b       	sbis	0x0b, 5	; 11
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <muart_sendStream+0x18>
 3a4:	80 81       	ld	r24, Z
 3a6:	8c b9       	out	0x0c, r24	; 12
 3a8:	5e 9b       	sbis	0x0b, 6	; 11
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <muart_sendStream+0xc>
 3ac:	2b b1       	in	r18, 0x0b	; 11
 3ae:	20 64       	ori	r18, 0x40	; 64
 3b0:	2b b9       	out	0x0b, r18	; 11
 3b2:	31 96       	adiw	r30, 0x01	; 1
 3b4:	69 2f       	mov	r22, r25
 3b6:	9f ef       	ldi	r25, 0xFF	; 255
 3b8:	96 0f       	add	r25, r22
 3ba:	61 11       	cpse	r22, r1
 3bc:	f1 cf       	rjmp	.-30     	; 0x3a0 <muart_sendStream+0x4>
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
